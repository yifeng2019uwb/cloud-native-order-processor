"""
RFC 7807 Problem Details Models

Implements RFC 7807 Problem Details for HTTP APIs
https://tools.ietf.org/html/rfc7807
"""

from datetime import datetime
from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field

try:
    from .error_codes import ErrorCode, get_http_status_code, get_error_title
except ImportError:
    from error_codes import ErrorCode, get_http_status_code, get_error_title


class ProblemDetails(BaseModel):
    """
    RFC 7807 Problem Details for HTTP APIs

    This model implements the standard Problem Details format as defined in RFC 7807.
    All error responses should use this format for consistency.
    """

    # Required fields per RFC 7807
    type: str = Field(
        ...,
        description="A URI reference that identifies the problem type",
        example="https://github.com/yifeng2019uwb/cloud-native-order-processor/blob/main/docs/errors/validation-error.md"
    )
    title: str = Field(
        ...,
        description="A short, human-readable summary of the problem type",
        example="Validation Error"
    )
    status: int = Field(
        ...,
        description="The HTTP status code generated by the origin server for this occurrence of the problem",
        example=422
    )
    detail: str = Field(
        ...,
        description="A human-readable explanation specific to this occurrence of the problem",
        example="The request body contains invalid data"
    )

    # Optional fields per RFC 7807
    instance: Optional[str] = Field(
        None,
        description="A URI reference that identifies the specific occurrence of the problem",
        example="/api/v1/users"
    )

    # Custom fields for additional context
    errors: Optional[List[Dict[str, Any]]] = Field(
        None,
        description="Field-specific validation errors (for validation problems)"
    )
    timestamp: Optional[datetime] = Field(
        default_factory=datetime.utcnow,
        description="When the error occurred"
    )
    trace_id: Optional[str] = Field(
        None,
        description="Request trace ID for debugging"
    )

    class Config:
        json_schema_extra = {
            "example": {
                "type": "https://github.com/yifeng2019uwb/cloud-native-order-processor/blob/main/docs/errors/validation-error.md",
                "title": "Validation Error",
                "status": 422,
                "detail": "The request body contains invalid data",
                "instance": "/api/v1/auth/register",
                "errors": [
                    {
                        "field": "email",
                        "message": "Invalid email format",
                        "value": "invalid-email"
                    }
                ],
                "timestamp": "2024-01-15T10:30:00Z",
                "trace_id": "req-12345"
            }
        }


def create_problem_details(
    error_code: ErrorCode,
    detail: str,
    instance: Optional[str] = None,
    errors: Optional[List[Dict[str, Any]]] = None,
    trace_id: Optional[str] = None
) -> ProblemDetails:
    """
    Create a Problem Details response

    Args:
        error_code: The standard error code
        detail: Human-readable error message
        instance: The endpoint that caused the error
        errors: Field-specific validation errors (for validation problems)
        trace_id: Request trace ID for debugging

    Returns:
        ProblemDetails instance
    """
    # Get HTTP status code and title for the error code
    status = get_http_status_code(error_code)
    title = get_error_title(error_code)

    # Create type URI based on error code
    type_uri = f"https://github.com/yifeng2019uwb/cloud-native-order-processor/blob/main/docs/errors/{error_code.value}.md"

    return ProblemDetails(
        type=type_uri,
        title=title,
        status=status,
        detail=detail,
        instance=instance,
        errors=errors,
        trace_id=trace_id
    )