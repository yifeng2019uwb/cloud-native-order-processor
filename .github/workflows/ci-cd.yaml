name: CI for Practice Project # It's good practice to give your workflow a name

on:
  push:
    branches:
      - '**' # This means it will trigger on pushes to any branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

     # --- ADD TERRAFORM SET STEP ---
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_path: ~/.terraformrc 

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # - name: Login to Amazon ECR # No need if not pushing/pulling
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2
      #   with:
      #     registry-type: private
      #     mask-password: 'true'

      - name: Plan Terraform Deployment (No Apply)
        run: |
          echo "Running Terraform plan..."
          cd terraform
          terraform init
          terraform plan -out=tfplan # Stores the plan
          #     terraform apply -auto-approve
          echo "Terraform plan complete."

      # *STOP* here. The following steps would likely fail without terraform apply
      # if ECR repositories were not created by a prior 'terraform apply'.
      # For a practice project without 'apply', you'd comment these out.

      # - name: Build and push Backend API Docker image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     API_ECR_REPOSITORY: cloud-native-order-processor-api
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     echo "Building backend API image..."
      #     cd backend-api/
      #     docker build -t $API_ECR_REPOSITORY:$IMAGE_TAG .
      #     docker tag $API_ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG
      #     docker push $ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG
      #     echo "Backend API image pushed successfully."

      # - name: Build and push Frontend HTML Docker image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     FRONTEND_ECR_REPOSITORY: cloud-native-order-processor-frontend
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     echo "Building frontend HTML image..."
      #     cd frontend-html/
      #     docker build -t $FRONTEND_ECR_REPOSITORY:$IMAGE_TAG .
      #     docker tag $FRONTEND_ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG
      #     docker push $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG
      #     echo "Frontend HTML image pushed successfully."