name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.13'
  AWS_REGION: 'us-west-2'
  ECR_REPOSITORY: 'order-processor-api'

jobs:
  # Job 1: Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('docker/api/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./docker/api
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Run linting
      working-directory: ./docker
      run: |
        # Run flake8 if it's installed
        if python -m pip show flake8 > /dev/null 2>&1; then
          python -m flake8 api tests --max-line-length=100 --exclude=__pycache__,venv,.venv
        fi
    
    - name: Run tests with coverage
      working-directory: ./docker
      run: |
        python -m pytest tests -v --cov=api --cov-report=xml --cov-report=term
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./docker/coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job 2: Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      working-directory: ./docker
      run: |
        docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} -f api/Dockerfile .
        docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ env.ECR_REPOSITORY }}:latest
    
    - name: Save Docker image
      run: |
        docker save ${{ env.ECR_REPOSITORY }}:${{ github.sha }} > order-api.tar
    
    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v4  # Changed from v3 to v4
      with:
        name: docker-image
        path: order-api.tar
        retention-days: 1

  # Job 3: Deploy to AWS (only on main branch)
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4  # Changed from v3 to v4
      with:
        name: docker-image
    
    - name: Load and push Docker image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker load < order-api.tar
        docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
    
    # - name: Update EKS deployment
    #   run: |
    #     # Install kubectl
    #     curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    #     chmod +x kubectl
    #     sudo mv kubectl /usr/local/bin/
        
    #     # Update kubeconfig
    #     aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name order-processor-cluster
        
    #     # Update deployment with new image
    #     kubectl set image deployment/order-api order-api=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} -n default
        
    #     # Wait for rollout to complete
    #     kubectl rollout status deployment/order-api -n default