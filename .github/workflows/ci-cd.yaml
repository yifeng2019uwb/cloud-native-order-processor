name: CI/CD Pipeline

# CI runs automatically (free) - tests and builds
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

  # CD runs ONLY manually (cost control) - actual AWS deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - prod
      profile:
        description: 'Resource profile'
        required: true
        default: 'prod'
        type: choice
        options:
          - learning
          - minimum
          - prod
      deploy_application:
        description: 'Deploy application after infrastructure'
        required: false
        default: true
        type: boolean
      run_integration_tests:
        description: 'Run integration tests'
        required: false
        default: true
        type: boolean
      auto_destroy:
        description: 'Auto-destroy infrastructure after tests (COST CONTROL)'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  AWS_REGION: 'us-west-2'
  ECR_REPOSITORY: 'order-processor-api'

jobs:
  # Job 1: CI - Always runs (FREE) - Tests and validation
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('services/*/requirements*.txt', 'services/common/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install build tools and upgrade pip
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel build
        pip install --upgrade pip setuptools wheel

    - name: Make build script executable
      working-directory: ./services
      run: chmod +x build.sh

    - name: Install Python 3 development tools (Ubuntu)
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pip python3-venv python3-wheel build-essential

    - name: Build common package (build-only)
      working-directory: ./services
      run: |
        echo "=== Building common package (build-only) ==="
        pip install wheel
        ./build.sh --build-only --verbose common

    - name: Build order-service (build-only)
      working-directory: ./services
      run: |
        echo "=== Building order-service (build-only) ==="
        ./build.sh --build-only --verbose order-service

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          services/*/dist/
          services/common/dist/
        retention-days: 7

    - name: Run linting
      working-directory: ./services
      run: |
        echo "=== Running linting ==="
        pip install flake8 black
        ./build.sh --test-only common

    - name: Run tests with coverage
      working-directory: ./services
      run: |
        echo "=== Running tests using working build script approach ==="
        # Use the exact same commands that work locally
        ./build.sh --test-only common
        ./build.sh --test-only order-service
        echo "All tests completed successfully"

  # Job 2: Build Docker Image - Always runs (FREE) - Validation only
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (validation only - no AWS costs)
      run: |
        echo "=== Building Docker image for CI validation (no ECR push) ==="

        # Use the same Dockerfile that quick_build.sh uses
        if [ -f "docker/order-service/Dockerfile.simple" ]; then
          echo "Using docker/order-service/Dockerfile.simple"
          docker build -f docker/order-service/Dockerfile.simple -t order-processor-api:latest .
        else
          echo "Error: Dockerfile.simple not found at expected location"
          find . -name "*Dockerfile*" -type f
          exit 1
        fi

        # Tag for CI/CD consistency (no push to ECR)
        docker tag order-processor-api:latest ${{ env.ECR_REPOSITORY }}:${{ github.sha }}

        echo "‚úÖ Docker image built successfully (validation only)"
        echo "üì¶ Local image: order-processor-api:latest"
        echo "üì¶ Tagged as: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}"

    - name: Test Docker image
      run: |
        docker run --rm ${{ env.ECR_REPOSITORY }}:${{ github.sha }} python --version
        echo "Docker image built and tested successfully"

    - name: Save Docker image as artifact
      if: github.event_name == 'workflow_dispatch'
      run: |
        docker save ${{ env.ECR_REPOSITORY }}:${{ github.sha }} > order-api.tar

    - name: Upload Docker image as artifact
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: order-api.tar
        retention-days: 1

  # Job 3: Deploy Infrastructure - ONLY runs manually (COST CONTROL)
  deploy:
    name: Deploy AWS Infrastructure
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: prod

    steps:
    - name: Show deployment info
      run: |
        echo "üöÄ Deploying to environment: prod"
        echo "üìã Resource profile: prod"
        echo "üîß Deploy application: true"

    - name: Show deployment info
      run: |
        echo "üöÄ Deploying to environment: ${{ github.event.inputs.environment }}"
        echo "üìã Resource profile: ${{ github.event.inputs.profile }}"
        echo "üîß Deploy application: ${{ github.event.inputs.deploy_application }}"

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup AWS
      uses: ./.github/actions/setup-aws
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy Infrastructure using Enhanced Script
      run: |
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh \
          --environment prod \
          --profile learning \
          --verbose

    - name: Upload Terraform outputs as artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: terraform/terraform.tfstate
        retention-days: 1

  # Job 4: Deploy Application - ONLY runs manually if selected
  deploy_application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: prod

    steps:
    - name: Show deployment info
      run: |
        echo "üì¶ Deploying application to: ${{ github.event.inputs.environment }}"
        if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
          echo "‚ö†Ô∏è  Manual approval was required for this deployment"
        fi

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup AWS
      uses: ./.github/actions/setup-aws
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image

    # Use enhanced deploy-app script
    - name: Deploy Application using Enhanced Script
      run: |
        chmod +x scripts/deploy-app.sh
        ./scripts/deploy-app.sh \
          --environment prod \
          --profile prod \
          --verbose

  # Job 5: Integration Tests - ONLY runs manually if selected
  integration_tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy, deploy_application]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: prod

    steps:
    - name: Show test info
      run: |
        echo "üß™ Running integration tests for: ${{ github.event.inputs.environment }}"
        if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
          echo "‚ö†Ô∏è  Manual approval was required for this test run"
        fi

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup AWS
      uses: ./.github/actions/setup-aws
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Use enhanced integration test script
    - name: Run Integration Tests using Enhanced Script
      run: |
        chmod +x scripts/test-integration.sh
        ./scripts/test-integration.sh \
          --environment prod \
          --verbose

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: |
          test-results/
          tests/reports/
        retention-days: 7

  # Job 6: Enhanced Destroy Infrastructure - ALWAYS runs for cost control
  destroy_infrastructure:
    name: Destroy Infrastructure (Cost Control)
    runs-on: ubuntu-latest
    needs: [deploy, deploy_application, integration_tests]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event.inputs.auto_destroy == 'true'

    steps:
    - name: Show deployment info
      run: |
        echo "üöÄ Deploying to environment: prod"
        echo "üìã Resource profile: prod"
        echo "üîß Deploy application: true"

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup AWS
      uses: ./.github/actions/setup-aws
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    # Use enhanced destroy script with nuclear cleanup
    - name: Destroy Infrastructure using Enhanced Script
      run: |
        chmod +x scripts/destroy.sh
        ./scripts/destroy.sh \
          --environment prod \
          --profile prod \
          --auto-approve \
          --force-cleanup \
          --verbose

    # Cost verification and reporting
    - name: Verify Complete Resource Cleanup
      if: always()
      run: |
        echo "=== Final Resource Cleanup Verification ==="

        # Check for ANY remaining project resources across regions
        echo "Checking all regions for remaining resources..."

        regions=("us-west-2" "us-east-1" "us-west-1" "us-east-2")
        total_resources=0

        for region in "${regions[@]}"; do
          echo "Checking region: $region"

          resources=$(aws resourcegroupstaggingapi get-resources \
            --tag-filters Key=Project,Values=order-processor \
            --region "$region" \
            --query 'ResourceTagMappingList | length' \
            --output text 2>/dev/null || echo "0")

          if [[ "$resources" -gt 0 ]]; then
            total_resources=$((total_resources + resources))
            echo "‚ö†Ô∏è Found $resources resources in $region"

            # Show detailed resource list
            aws resourcegroupstaggingapi get-resources \
              --tag-filters Key=Project,Values=order-processor \
              --region "$region" \
              --query 'ResourceTagMappingList[].ResourceARN' \
              --output table
          else
            echo "‚úÖ No resources in $region"
          fi
        done

        if [[ "$total_resources" -eq 0 ]]; then
          echo ""
          echo "üéâ SUCCESS: All project resources destroyed!"
          echo "üí∞ Estimated ongoing cost: $0.00/month"
        else
          echo ""
          echo "‚ö†Ô∏è WARNING: $total_resources resources still exist"
          echo "üí∞ These may incur ongoing charges"
          echo "üîß Manual cleanup may be required"
        fi

    - name: Cost Impact Report
      if: always()
      run: |
        echo "=== üí∞ Cost Impact Analysis ==="
        echo ""
        echo "Deployment Summary:"
        echo "  Environment: ${{ github.event.inputs.environment }}"
        echo "  Profile: ${{ github.event.inputs.profile }}"
        echo "  Duration: ~30-60 minutes"
        echo "  Auto-destroy: ${{ github.event.inputs.auto_destroy }}"
        echo ""
        echo "Expected Costs (if auto-destroy enabled):"
        echo "  Learning Profile: ~$2-5 for this run"
        echo "  Minimum Profile: ~$5-10 for this run"
        echo "  Prod Profile: ~$20-40 for this run"
        echo ""
        echo "Expected Costs (if auto-destroy disabled):"
        echo "  Learning Profile: ~$5-15/day ongoing"
        echo "  Minimum Profile: ~$10-25/day ongoing"
        echo "  Prod Profile: ~$50-100/day ongoing"
        echo ""
        if [[ "${{ github.event.inputs.auto_destroy }}" == "true" ]]; then
          echo "‚úÖ Auto-destroy enabled - minimal costs expected"
        else
          echo "‚ö†Ô∏è Auto-destroy disabled - remember to clean up manually!"
        fi

    # Pipeline summary
    - name: Pipeline Summary
      if: always()
      run: |
        echo "=== üöÄ CI/CD Pipeline Summary ==="
        echo ""
        echo "üîÑ What Happened:"
        echo "  ‚úÖ CI: Tests and builds completed"
        echo "  ‚úÖ CD: Manual deployment triggered"
        echo "  üì¶ Infrastructure: ${{ github.event.inputs.environment }} environment"
        echo "  üíé Profile: ${{ github.event.inputs.profile }} resources"
        echo "  üöÄ Application: ${{ github.event.inputs.deploy_application }}"
        echo "  üß™ Tests: ${{ github.event.inputs.run_integration_tests }}"
        echo "  üßπ Cleanup: ${{ github.event.inputs.auto_destroy }}"
        echo ""
        echo "üí° Key Benefits:"
        echo "  ‚úÖ Cost-controlled deployment (manual trigger only)"
        echo "  ‚úÖ Real AWS infrastructure testing"
        echo "  ‚úÖ Complete end-to-end validation"
        echo "  ‚úÖ Automatic resource cleanup"
        echo "  ‚úÖ Industry-standard CI/CD practices"
        echo ""
        echo "üéØ Learning Objectives Achieved:"
        echo "  ‚úÖ Infrastructure as Code (Terraform)"
        echo "  ‚úÖ Container deployment (Docker + EKS)"
        echo "  ‚úÖ CI/CD automation (GitHub Actions)"
        echo "  ‚úÖ Cloud cost management"
        echo "  ‚úÖ Integration testing"
        echo ""
        echo "=== End of Pipeline ==="