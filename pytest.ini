# File: pytest.ini
# pytest.ini - Test configuration
[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts =
    -v
    --tb=short
    --strict-markers
    --color=yes
    --durations=10
markers =
    infrastructure: Infrastructure integration tests
    slow: Slow running tests
    aws: Tests that require AWS credentials
    skip_ci: Skip in CI environment

# Test timeout (10 minutes for infrastructure tests)
timeout = 600

---
# File: tests/conftest.py
# tests/conftest.py - Shared test configuration
import pytest
import boto3
import subprocess
import os
import json
from pathlib import Path

def pytest_configure(config):
    """Configure pytest with custom markers"""
    config.addinivalue_line("markers", "infrastructure: Infrastructure integration tests")
    config.addinivalue_line("markers", "slow: Slow running tests")
    config.addinivalue_line("markers", "aws: Tests that require AWS credentials")

@pytest.fixture(scope="session")
def terraform_outputs():
    """Get Terraform outputs for use across all tests"""
    terraform_dir = Path(__file__).parent.parent / "terraform"

    try:
        result = subprocess.run(
            ["terraform", "output", "-json"],
            cwd=terraform_dir,
            capture_output=True,
            text=True,
            check=True
        )
        return json.loads(result.stdout)
    except subprocess.CalledProcessError as e:
        pytest.fail(f"Failed to get Terraform outputs: {e.stderr}")
    except FileNotFoundError:
        pytest.fail("Terraform not found. Ensure Terraform is installed.")

@pytest.fixture(scope="session")
def aws_session():
    """Create AWS session for tests"""
    try:
        session = boto3.Session()
        # Verify credentials work
        sts = session.client('sts')
        sts.get_caller_identity()
        return session
    except Exception as e:
        pytest.fail(f"AWS credentials not configured: {e}")

@pytest.fixture(scope="session")
def aws_account_id(aws_session):
    """Get AWS account ID"""
    sts = aws_session.client('sts')
    identity = sts.get_caller_identity()
    return identity['Account']

@pytest.fixture(scope="session")
def aws_region(aws_session):
    """Get AWS region"""
    return aws_session.region_name or 'us-west-2'

def pytest_collection_modifyitems(config, items):
    """Add markers to tests based on their path"""
    for item in items:
        # Add infrastructure marker to infrastructure tests
        if "infrastructure" in str(item.fspath):
            item.add_marker(pytest.mark.infrastructure)
            item.add_marker(pytest.mark.aws)
            item.add_marker(pytest.mark.slow)

---
# File: tests/requirements-test.txt
# tests/requirements-test.txt - Test dependencies
# Core testing
pytest==7.4.3
pytest-asyncio==0.21.1
pytest-cov==4.1.0
pytest-mock==3.12.0
pytest-timeout==2.2.0
pytest-xdist==3.5.0

# AWS SDK
boto3==1.34.0
botocore==1.34.0

# Kubernetes testing (optional)
kubernetes==28.1.0

# HTTP testing
requests==2.31.0
httpx==0.25.2

# JSON and data handling
pydantic==2.5.0

# Database testing
psycopg2-binary==2.9.9
asyncpg==0.29.0

# Load testing (for later phases)
locust==2.17