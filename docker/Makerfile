# Start with your base image (e.g., python:3.11-slim-buster or a similar official Python image)
# Example:
FROM python:3.11-slim-buster

# Set the working directory inside the container
WORKDIR /app

# Install system dependencies required for building Python packages,
# including curl for downloading rustup and development libraries for psycopg2-binary and confluent-kafka.
# build-essential provides compilers like gcc.
# librdkafka-dev is needed by confluent-kafka.
# libpq-dev is needed by psycopg2-binary.
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    librdkafka-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables for Rust and Cargo to ensure proper installation paths
ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH

# Install Rust and Cargo using rustup
# -sSf for silent, fail-fast download
# -y for non-interactive installation
# --profile minimal to keep the image size small
# --no-modify-path because we set PATH explicitly with ENV
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --no-modify-path \
    && chmod -R a+w $RUSTUP_HOME $CARGO_HOME

# Copy your requirements file into the container
COPY requirements.txt .

# Install Python dependencies (this step will now find Rust/Cargo for pydantic-core and confluent-kafka)
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of your application code
COPY . .

# Define the command to run your application (adjust as needed)
CMD ["python", "your_app_entrypoint.py"]