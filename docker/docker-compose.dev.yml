services:
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: order-processor-redis-dev
    # No ports - Redis only accessible within Docker network
    volumes:
      - redis_data_dev:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - order-processor-network

  frontend-dev:
    build:
      context: ../
      dockerfile: docker/frontend/Dockerfile.dev
    image: order-processor-frontend:latest
    container_name: order-processor-frontend-dev
    ports:
      - "3000:3000"
    depends_on:
      - user_service
      - inventory_service
    networks:
      - order-processor-network
    # Development volumes for hot reloading
    volumes:
      - ../frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    stdin_open: true
    tty: true

  user_service:
    build:
      context: ../
      dockerfile: docker/user-service/Dockerfile
    image: order-processor-user_service:latest
    container_name: order-processor-user_service
    ports:
      - "8000:8000"
    environment:
      # Use environment variables that can be overridden
      - ORDERS_TABLE=${ORDERS_TABLE:-order-processor-dev-orders}
      - INVENTORY_TABLE=${INVENTORY_TABLE:-order-processor-dev-inventory}
      - USERS_TABLE=${USERS_TABLE:-order-processor-dev-users}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - JWT_SECRET=${JWT_SECRET:-your-development-jwt-secret-key-here}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION_HOURS=24
      - SERVICE_NAME=user_service
      - SERVICE_PORT=8000
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=
      - REDIS_SSL=false
    volumes:
      - ~/.aws:/root/.aws:ro
      # Auto-reload for development
      - ../services:/app/services:ro
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - order-processor-network

  inventory_service:
    build:
      context: ../
      dockerfile: docker/inventory-service/Dockerfile
    image: order-processor-inventory_service:latest
    container_name: order-processor-inventory_service
    ports:
      - "8001:8001"
    environment:
      # Use environment variables that can be overridden
      - ORDERS_TABLE=${ORDERS_TABLE:-order-processor-dev-orders}
      - INVENTORY_TABLE=${INVENTORY_TABLE:-order-processor-dev-inventory}
      - USERS_TABLE=${USERS_TABLE:-order-processor-dev-users}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - SERVICE_NAME=inventory_service
      - SERVICE_PORT=8001
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=
      - REDIS_SSL=false
    volumes:
      - ~/.aws:/root/.aws:ro
      # Auto-reload for development
      - ../services:/app/services:ro
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - order-processor-network

networks:
  order-processor-network:
    name: order-processor-network
    driver: bridge

volumes:
  redis_data_dev:
    driver: local