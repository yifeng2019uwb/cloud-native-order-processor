version: '3.8'

services:
  order-service:
    build:
      context: ../../
      dockerfile: docker/order-service/Dockerfile
    container_name: order-service
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://orderuser:orderpass@postgres:5432/orderdb
      - REDIS_URL=redis://redis:6379/0
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - SNS_TOPIC_ORDER_EVENTS=order-events
      - SNS_TOPIC_PAYMENT_EVENTS=payment-events
      - SQS_QUEUE_ORDER_PROCESSING=order-processing-queue
      - SQS_QUEUE_PAYMENT_PROCESSING=payment-processing-queue
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      localstack:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - order-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "healthcheck/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: order-postgres
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: orderuser
      POSTGRES_PASSWORD: orderpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - order-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderuser -d orderdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: order-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - order-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: order-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - order-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: order-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "order-events:1:1,payment-events:1:1,inventory-events:1:1"
    networks:
      - order-network

volumes:
  postgres_data:
  redis_data:

networks:
  order-network:
    driver: bridge