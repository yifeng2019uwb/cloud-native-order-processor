apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: order-processor
  labels:
    app: order-processor
    component: user-service
    environment: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-processor
      component: user-service
  template:
    metadata:
      labels:
        app: order-processor
        component: user-service
        environment: production
    spec:
      serviceAccountName: order-processor-sa
      imagePullSecrets:
      - name: ecr-registry-secret
      containers:
      - name: user-service
        image: order-processor-user-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: USERS_TABLE
          value: "order-processor-prod-users"
        - name: ORDERS_TABLE
          value: "order-processor-prod-orders"
        - name: INVENTORY_TABLE
          value: "order-processor-prod-inventory"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        - name: AWS_REGION
          value: "us-west-2"
        - name: LOG_FILE_PATH
          value: "/app/logs"
        - name: REDIS_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: redis-endpoint
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: logs-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventory-service
  namespace: order-processor
  labels:
    app: order-processor
    component: inventory-service
    environment: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-processor
      component: inventory-service
  template:
    metadata:
      labels:
        app: order-processor
        component: inventory-service
        environment: production
    spec:
      serviceAccountName: order-processor-sa
      imagePullSecrets:
      - name: ecr-registry-secret
      containers:
      - name: inventory-service
        image: order-processor-inventory-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8001
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: USERS_TABLE
          value: "order-processor-prod-users"
        - name: ORDERS_TABLE
          value: "order-processor-prod-orders"
        - name: INVENTORY_TABLE
          value: "order-processor-prod-inventory"
        - name: AWS_REGION
          value: "us-west-2"
        - name: LOG_FILE_PATH
          value: "/app/logs"
        - name: REDIS_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: redis-endpoint
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: logs-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: order-processor
  labels:
    app: order-processor
    component: order-service
    environment: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-processor
      component: order-service
  template:
    metadata:
      labels:
        app: order-processor
        component: order-service
        environment: production
    spec:
      serviceAccountName: order-processor-sa
      imagePullSecrets:
      - name: ecr-registry-secret
      containers:
      - name: order-service
        image: order-processor-order-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8002
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: USERS_TABLE
          value: "order-processor-prod-users"
        - name: ORDERS_TABLE
          value: "order-processor-prod-orders"
        - name: INVENTORY_TABLE
          value: "order-processor-prod-inventory"
        - name: AWS_REGION
          value: "us-west-2"
        - name: LOG_FILE_PATH
          value: "/app/logs"
        - name: REDIS_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: redis-endpoint
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: logs-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: order-processor
  labels:
    app: order-processor
    component: auth-service
    environment: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-processor
      component: auth-service
  template:
    metadata:
      labels:
        app: order-processor
        component: auth-service
        environment: production
    spec:
      serviceAccountName: order-processor-sa
      imagePullSecrets:
      - name: ecr-registry-secret
      containers:
      - name: auth-service
        image: order-processor-auth-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8003
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        - name: JWT_ALGORITHM
          value: "HS256"
        - name: JWT_EXPIRATION_MINUTES
          value: "60"
        - name: AWS_REGION
          value: "us-west-2"
        - name: LOG_FILE_PATH
          value: "/app/logs"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: logs-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
  namespace: order-processor
  labels:
    app: order-processor
    component: gateway
    environment: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-processor
      component: gateway
  template:
    metadata:
      labels:
        app: order-processor
        component: gateway
        environment: production
    spec:
      serviceAccountName: order-processor-sa
      imagePullSecrets:
      - name: ecr-registry-secret
      containers:
      - name: gateway
        image: order-processor-gateway:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: GATEWAY_HOST
          value: "0.0.0.0"
        - name: GATEWAY_PORT
          value: "8080"
        - name: USER_SERVICE_URL
          value: "http://user-service:8000"
        - name: INVENTORY_SERVICE_URL
          value: "http://inventory-service:8001"
        - name: ORDER_SERVICE_URL
          value: "http://order-service:8002"
        - name: AUTH_SERVICE_URL
          value: "http://auth-service:8003"
        - name: REDIS_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: redis-endpoint
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
        resources:
          limits:
            cpu: "200m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: logs-volume
        emptyDir: {}
