apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: order-processor
  labels:
    app: order-processor
    component: user-service
    environment: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-processor
      component: user-service
  template:
    metadata:
      labels:
        app: order-processor
        component: user-service
        environment: production
    spec:
      serviceAccountName: order-processor-sa
      containers:
      - name: user-service
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/order-processor-user-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: USERS_TABLE
          value: "order-processor-prod-users"
        - name: ORDERS_TABLE
          value: "order-processor-prod-orders"
        - name: INVENTORY_TABLE
          value: "order-processor-prod-inventory"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        - name: AWS_REGION
          value: "us-east-1"
        - name: REDIS_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: redis-endpoint
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventory-service
  namespace: order-processor
  labels:
    app: order-processor
    component: inventory-service
    environment: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-processor
      component: inventory-service
  template:
    metadata:
      labels:
        app: order-processor
        component: inventory-service
        environment: production
    spec:
      serviceAccountName: order-processor-sa
      containers:
      - name: inventory-service
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/order-processor-inventory-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8001
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: USERS_TABLE
          value: "order-processor-prod-users"
        - name: ORDERS_TABLE
          value: "order-processor-prod-orders"
        - name: INVENTORY_TABLE
          value: "order-processor-prod-inventory"
        - name: AWS_REGION
          value: "us-east-1"
        - name: REDIS_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: redis-endpoint
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: order-processor
  labels:
    app: order-processor
    component: frontend
    environment: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-processor
      component: frontend
  template:
    metadata:
      labels:
        app: order-processor
        component: frontend
        environment: production
    spec:
      serviceAccountName: order-processor-sa
      containers:
      - name: frontend
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/order-processor-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: REACT_APP_API_URL
          value: "https://api.order-processor.yourdomain.com"
        - name: REACT_APP_USER_SERVICE_URL
          value: "https://api.order-processor.yourdomain.com/auth"
        - name: REACT_APP_INVENTORY_SERVICE_URL
          value: "https://api.order-processor.yourdomain.com/inventory"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: order-processor
  labels:
    app: order-processor
    component: order-service
    environment: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-processor
      component: order-service
  template:
    metadata:
      labels:
        app: order-processor
        component: order-service
        environment: production
    spec:
      serviceAccountName: order-processor-sa
      containers:
      - name: order-service
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/order-processor-order-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8002
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: USERS_TABLE
          value: "order-processor-prod-users"
        - name: ORDERS_TABLE
          value: "order-processor-prod-orders"
        - name: INVENTORY_TABLE
          value: "order-processor-prod-inventory"
        - name: AWS_REGION
          value: "us-east-1"
        - name: REDIS_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: redis-endpoint
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: order-processor
  labels:
    app: order-processor
    component: auth-service
    environment: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-processor
      component: auth-service
  template:
    metadata:
      labels:
        app: order-processor
        component: auth-service
        environment: production
    spec:
      serviceAccountName: order-processor-sa
      containers:
      - name: auth-service
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/order-processor-auth-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8003
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        - name: JWT_ALGORITHM
          value: "HS256"
        - name: JWT_EXPIRATION_MINUTES
          value: "60"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true