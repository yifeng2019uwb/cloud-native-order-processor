# NOTE:
# For local development, this Service uses NodePort to allow direct access from the host machine (e.g., localhost:30001).
# In a production or enterprise cloud setup, you should use 'type: LoadBalancer' to expose services publicly via a cloud load balancer (e.g., AWS ELB, GCP LB).
# For internal-only services, use 'type: ClusterIP' (the default) to restrict access to within the cluster.
# This is a personal project, so NodePort is used for simplicity and to focus on core skills, not on advanced networking or ingress.
# Plan: Switch to LoadBalancer for public endpoints and ClusterIP for internal-only access in production or when security is a priority.
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: order-processor
  labels:
    app: order-processor
    component: user-service
    environment: dev
spec:
  type: NodePort
  selector:
    app: order-processor
    component: user-service
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    nodePort: 30001
    protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: inventory-service
  namespace: order-processor
  labels:
    app: order-processor
    component: inventory-service
    environment: dev
spec:
  type: NodePort
  selector:
    app: order-processor
    component: inventory-service
  ports:
  - name: http
    port: 8001
    targetPort: 8001
    nodePort: 30002
    protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: order-processor
  labels:
    app: order-processor
    component: order-service
    environment: dev
spec:
  type: NodePort
  selector:
    app: order-processor
    component: order-service
  ports:
  - name: http
    port: 8002
    targetPort: 8002
    nodePort: 30003
    protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: order-processor
  labels:
    app: order-processor
    component: frontend
    environment: dev
spec:
  type: NodePort
  selector:
    app: order-processor
    component: frontend
  ports:
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30004
    protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: gateway
  namespace: order-processor
  labels:
    app: order-processor
    component: gateway
    environment: dev
spec:
  type: NodePort
  selector:
    app: order-processor
    component: gateway
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    nodePort: 30000
    protocol: TCP